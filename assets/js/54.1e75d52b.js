(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{461:function(t,s,a){"use strict";a.r(s);var n=a(56),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gc-garbage-collection-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc-garbage-collection-垃圾回收"}},[t._v("#")]),t._v(" GC(Garbage collection)垃圾回收")]),t._v(" "),a("h2",{attrs:{id:"常见gc算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见gc算法"}},[t._v("#")]),t._v(" 常见GC算法")]),t._v(" "),a("p",[t._v("业界常见的比较知名的垃圾回收算法有：")]),t._v(" "),a("p",[a("strong",[t._v("1.")]),t._v(" "),a("strong",[t._v("引用计数(Reference counting)")]),t._v(" ：对每个对象维护一个引用计数，当引用计数器为零时回收该对象。代表语言如 Python。")]),t._v(" "),a("ul",[a("li",[t._v("优点：简单有效，对象可以被很快回收，不会出现内存耗尽或达到某个阀值时才回收。")]),t._v(" "),a("li",[t._v("缺点：很明显，对每个对象维护引用计数有一定代价，而且致命的是无法处理循环引用的问题。")])]),t._v(" "),a("p",[a("strong",[t._v("2.")]),t._v(" "),a("strong",[t._v("标记-清除(Mark and Sweep)")]),t._v(" ：为解决循环引用问题而提出，算法从"),a("strong",[t._v("根对象")]),t._v("开始遍历程序所有对象的引用，可达的对象被标记，最终没被标记的对象被删除回收。代表语言如 Golang(三色标记)。")]),t._v(" "),a("ul",[a("li",[t._v("优点：解决循环引用的问题，并且在算法执行期间不会产生额外的开销。")]),t._v(" "),a("li",[t._v("缺点：需要 STW(stop the world)，即执行期间需要程序暂停，并且容易在经过多次『标记-清除』循环后导致内存碎片化。")])]),t._v(" "),a("p",[a("strong",[t._v("3.")]),t._v(" "),a("strong",[t._v("停止-复制(Stop-and-Copy)")]),t._v(" ：与标记-清除算法类似，差异在于如何处理这些可达的存活对象。该算法将整个堆空间被切分活动区和空闲区，垃圾收集时将所有的可达的存活对象复制到另一区，原本半区的就可以被回收，程序会在新的活动区中分配内存。")]),t._v(" "),a("ul",[a("li",[t._v("优点：运行高效且不容易产生内存碎片，基本解决了标记-清除内存碎片化的问题。")]),t._v(" "),a("li",[t._v("缺点：需要 STW，收集器必须复制所有的活动对象，这增加了程序等待时间，并且在同一时间内只能使用整个内存空间的一半。")])]),t._v(" "),a("p",[a("strong",[t._v("3.")]),t._v(" "),a("strong",[t._v("标记-压缩(Mark-and-Compact)")]),t._v(" ：标记阶段与标记-清除算法相同，压缩（整理）阶段不是直接清理，而是让所有的对象都向一端移动，按顺序排放更新对应的指针，然后清理掉端边界以外的内存。")]),t._v(" "),a("ul",[a("li",[t._v("优点：避免了标记-清除的碎片化问题，同时也避免了停止复制算法的内存空间减半问题。")]),t._v(" "),a("li",[t._v("缺点：需要 STW，低效，因为增加了 copy 和更新指针的过程。")])]),t._v(" "),a("p",[a("strong",[t._v("5.")]),t._v(" "),a("strong",[t._v("分代收集(Generational Collection)")]),t._v(" ：与其说是一种新算法不如说是一种优化策略，目前很流行。算法按照对象生命周期长短划分不同的代空间，生命周期长的放入老年代，短的放入新生代，从而区别不同的回收算法策略和频率，让各算法充分发挥优势。代表语言如 Java。")]),t._v(" "),a("ul",[a("li",[t._v("优点：可结合其他检测算法，回收性能好。")]),t._v(" "),a("li",[t._v("缺点：算法比较复杂。")])]),t._v(" "),a("p",[t._v("没有绝对好和坏的解决方案，在真正语言实现中一般都是几种算法结合使用，下面主要来探讨 Python 中的垃圾回收策略。")]),t._v(" "),a("h2",{attrs:{id:"python垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python垃圾回收机制"}},[t._v("#")]),t._v(" Python垃圾回收机制")]),t._v(" "),a("p",[a("strong",[t._v("Python的垃圾回收机制采用引用计数机制为主，标记-清除和分代回收机制为辅的策略。其中，标记-清除机制用来解决计数引用带来的循环引用而无法释放内存的问题，分代回收机制是为提升垃圾回收的效率。")])]),t._v(" "),a("h3",{attrs:{id:"python垃圾回收的时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python垃圾回收的时机"}},[t._v("#")]),t._v(" Python垃圾回收的时机")]),t._v(" "),a("p",[t._v("1、用户显示调用gc.collect()\n2、每次Python为新对象分配内存时，检查threshold阀值，当对象数量超过threshold设置的阀值就开始进行垃圾回收。")]),t._v(" "),a("h2",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("ul",[a("li",[t._v("优点\n"),a("ul",[a("li",[t._v("简单")]),t._v(" "),a("li",[t._v("实时性：一旦没有引用，内存就直接释放了,处理回收内存的时间分摊到了平时.")])])]),t._v(" "),a("li",[t._v("缺点\n"),a("ol",[a("li",[t._v("维护引用计数消耗资源")]),t._v(" "),a("li",[t._v("循环引用")]),t._v(" "),a("li",[t._v("线程锁定（CPython无法摆脱GIL的原因之一）")])])])]),t._v(" "),a("p",[t._v("查看一个对象的引用计数")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 调用函数传入a,会让a的引用计数加1")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("引用计数+1")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对象被创建 a = [111]  1")])]),t._v(" "),a("li",[a("p",[t._v("对象被引用 b = a  2")])]),t._v(" "),a("li",[a("p",[t._v("对象被作为参数，传入一个函数中 sys.getrefcount(a) 3")])]),t._v(" "),a("li",[a("p",[t._v("对象作为一个元素，存储在容器中 c = [a] 3")])]),t._v(" "),a("li",[a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])])])]),t._v(" "),a("li",[a("p",[t._v("引用计数-1")]),t._v(" "),a("ul",[a("li",[t._v("使用del语句对对象别名显式的销毁(例如：del b)")]),t._v(" "),a("li",[t._v("对象所在的容器被销毁或从容器中删除对象")]),t._v(" "),a("li",[t._v("引用超出作用域或被重新赋值")])])]),t._v(" "),a("li",[a("p",[t._v("触发垃圾回收")]),t._v(" "),a("ul",[a("li",[t._v("调用gc.collect()")]),t._v(" "),a("li",[t._v("当gc模块的计数器达到阈值")]),t._v(" "),a("li",[t._v("程序退出的时候")])])])]),t._v(" "),a("h2",{attrs:{id:"标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),a("ul",[a("li",[t._v("引用计数能够解决大多数垃圾回收的问题，但是遇到两个对象相互引用的情况，del语句可以减少引用次数，但是引用计数不会归0，对象也就不会被销毁，从而造成了内存泄漏问题。针对该情况，Python引入了标记-清除机制。")]),t._v(" "),a("li",[t._v("标记阶段，遍历所有的对象，如果是可达的（reachable），也就是还有对象引用它，那么就标记该对象为可达")]),t._v(" "),a("li",[t._v("清除阶段，再次遍历对象，如果发现某个对象没有标记为可达（即为Unreachable），则就将其回收")])]),t._v(" "),a("h3",{attrs:{id:"循环引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环引用"}},[t._v("#")]),t._v(" 循环引用")]),t._v(" "),a("ul",[a("li",[t._v("循环引用只有在容器对象才会产生，比如字典，元组，列表等。")]),t._v(" "),a("li",[t._v("产生循环引用情况\n"),a("ul",[a("li",[t._v("对象包含本身的引用 "),a("code",[t._v("a = [1,2] a = [a,3]")])]),t._v(" "),a("li",[t._v("两个对象之间相互引用")])])])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" a\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTraceback "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("most recent call last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  File "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<pyshell#15>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nNameError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" defined\nsys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("h2",{attrs:{id:"分代回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分代回收"}},[t._v("#")]),t._v(" 分代回收")]),t._v(" "),a("p",[t._v("把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，该对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中")]),t._v(" "),a("p",[t._v("1、新创建的对象做为0代\n2、每执行一个【标记-删除】，存活的对象代数就+1\n3、代数越高的对象（存活越持久的对象），进行【标记-删除】的时间间隔就越长。这个间隔，江湖人称阀值。")]),t._v(" "),a("ol",[a("li",[t._v("gc模块里面会有一个长度为3的列表计数器，可以通过gc.get_count()获取\n"),a("ol",[a("li",[t._v("gc.set_threshold(threshold0[, threshold1[, threshold2]) 设置自动执行垃圾回收的频率")]),t._v(" "),a("li",[t._v("例如(700,10,10)每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目")]),t._v(" "),a("li",[t._v("700表示阈值，10表示每清理10次零代就清理一次一代，第二个10表示每清理10次一代链表就清理二代一次")])])])]),t._v(" "),a("ul",[a("li",[t._v("注意点：\n"),a("ul",[a("li",[t._v("gc模块唯一处理不了的是循环引用的类都有__del__方法，所以项目中要避免定义__del__方法")])])])]),t._v(" "),a("h3",{attrs:{id:"环状双向链表-refchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环状双向链表-refchain"}},[t._v("#")]),t._v(" 环状双向链表 refchain")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("object -----"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                    ob_refcnt                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n              +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PyObject_HEAD\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                    *ob_type                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n              +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ /\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".                      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("              +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                    *_gc_next                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n              +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PyGC_Head\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                    *_gc_prev                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\nobject -----"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ /\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                    ob_refcnt                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n              +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PyObject_HEAD\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                    *ob_type                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n              +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ /\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".                      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"池化技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#池化技术"}},[t._v("#")]),t._v(" 池化技术")]),t._v(" "),a("h2",{attrs:{id:"备忘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备忘"}},[t._v("#")]),t._v(" 备忘")]),t._v(" "),a("p",[t._v("提示或建议")]),t._v(" "),a("ol",[a("li",[t._v("如果你可以保证不会出现循环引用，则可以通过 gc.disable 完全禁用 GC，在某些情况下，禁用 GC 并手动 gc.collect() 很有用。")]),t._v(" "),a("li",[t._v("为避免产生循环引用，可考虑使用弱引用 weakref ，weakref.ref 不会增加引用计数，并且当对象只剩弱引用时不会保持其活性（可以被 GC 正常回收），并在对象被释放后安全返回 None。")]),t._v(" "),a("li",[t._v("循环在现实生活中很容易发生。通常，您会在图形，链接列表或结构中遇到它们，在其中需要跟踪对象之间的关系。如果您的程序工作量大且要求低延迟，则需要尽可能避免参考周期。")])]),t._v(" "),a("p",[t._v("查找或调试分析循环引用")]),t._v(" "),a("ol",[a("li",[t._v("标准 gc 模块 提供了接口可以帮助调试，例如 gc.set_debug(gc.DEBUG_SAVEALL)，则找到的所有的不可达对象将追加到 gc.garbage 列表中，你可以在其中查看。")]),t._v(" "),a("li",[t._v("当你发现了循环引用的对象后，就可以使用上文中提到的 objgraph 来直观的探索它与其它对象间的关系。")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://devguide.python.org/internals/garbage-collector/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://devguide.python.org/internals/garbage-collector/"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000016078708",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000016078708"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/yueguanghaidao/article/details/11274737",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/yueguanghaidao/article/details/11274737"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/Python_222/article/details/130012232?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-130012232-blog-87879064.235%5Ev39%5Epc_relevant_yljh&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-130012232-blog-87879064.235%5Ev39%5Epc_relevant_yljh&utm_relevant_index=2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/Python_222/article/details/130012232?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-130012232-blog-87879064.235%5Ev39%5Epc_relevant_yljh&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-130012232-blog-87879064.235%5Ev39%5Epc_relevant_yljh&utm_relevant_index=2"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);