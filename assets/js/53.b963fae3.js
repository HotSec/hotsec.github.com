(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{459:function(t,s,n){"use strict";n.r(s);var a=n(56),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"函数式编程模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程模块"}},[t._v("#")]),t._v(" 函数式编程模块")]),t._v(" "),n("h2",{attrs:{id:"functools-高阶函数和可调用对象上的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functools-高阶函数和可调用对象上的操作"}},[t._v("#")]),t._v(" functools 高阶函数和可调用对象上的操作")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("functools.cache(user_function)")])]),t._v(" "),n("li",[n("p",[t._v("functools.cached_property(func)")]),t._v(" "),n("ul",[n("li",[t._v("将一个类方法转换为特征属性，一次性计算该特征属性的值，然后将其缓存为实例生命周期内的普通属性。 类似于"),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/functions.html#property",title:"property",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("property()")]),n("OutboundLink")],1),t._v("但增加了缓存功能。")])])]),t._v(" "),n("li",[n("p",[t._v("functools.lru_cache(user_function)")])]),t._v(" "),n("li",[n("p",[t._v("functools.lru_cache(maxsize=128, typed=False)")]),t._v(" "),n("ul",[n("li",[t._v("一个为函数提供缓存功能的装饰器，缓存 maxsize 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或I/O函数的调用时间。")]),t._v(" "),n("li",[t._v("如果 maxsize 设为 None，LRU 特性将被禁用且缓存可无限增长。")])])]),t._v(" "),n("li",[n("p",[t._v("functools.total_ordering")]),t._v(" "),n("ul",[n("li",[t._v("给定一个声明一个或多个全比较排序方法的类，这个类装饰器实现剩余的方法。这减轻了指定所有可能的全比较操作的工作。")]),t._v(" "),n("li",[t._v("此类必须包含以下方法之一："),n("strong",[t._v("lt")]),t._v("() 、"),n("strong",[t._v("le")]),t._v("()、"),n("strong",[t._v("gt")]),t._v("() 或 "),n("strong",[t._v("ge")]),t._v("()。另外，此类必须支持 "),n("strong",[t._v("eq")]),t._v("() 方法。")])])]),t._v(" "),n("li",[n("p",[t._v("functools.partial(func, /, *args, **keywords)")]),t._v(" "),n("ul",[n("li",[t._v("返回一个新的 部分对象，当被调用时其行为类似于 func 附带位置参数 args 和关键字参数 keywords 被调用。 如果为调用提供了更多的参数，它们会被附加到 args。 如果提供了额外的关键字参数，它们会扩展并重载 keywords。")])])]),t._v(" "),n("li",[n("p",[t._v("functools.reduce(function, iterable[, initializer])")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("将两个参数的 "),n("em",[t._v("function")]),t._v(" 从左至右积累地应用到 "),n("em",[t._v("iterable")]),t._v(" 的条目，以便将该可迭代对象缩减为单一的值。")])]),t._v(" "),n("li",[n("p",[t._v("reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) 是计算 ((((1+2)+3)+4)+5) 的值")])]),t._v(" "),n("li",[n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iterable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initializer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    it "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("iter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" initializer "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initializer\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" element "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])])])])]),t._v(" "),n("li",[n("p",[t._v("@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)")]),t._v(" "),n("ul",[n("li",[t._v("在定义包装器函数时保留文本字符串等信息 "),n("strong",[t._v("name")]),t._v(" "),n("strong",[t._v("doc")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);